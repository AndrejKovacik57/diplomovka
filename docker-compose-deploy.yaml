services:

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - app-network
    restart: always

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    env_file:
      - ./backend/.env
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    restart: always
    networks:
      - app-network
    volumes:
      - ./backend/storage:/var/www/html/storage

  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_DB: postgres-database
      POSTGRES_USER: postgres-username
      POSTGRES_PASSWORD: postgres-password
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USERNAME}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_FORCE_SCRIPT_NAME: "/pgadmin"
      PGADMIN_CONFIG_PROXY_X_FOR_COUNT: 1
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - app-network
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    restart: unless-stopped

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: worker
    depends_on:
      - backend
      - postgres
      - redis
    networks:
      - app-network
    volumes:
      - ./backend/storage:/var/www/html/storage
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    restart: always

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    restart: always

  test-db:
    image: postgres:14
    container_name: test-db
    environment:
      POSTGRES_DB: testing
      POSTGRES_USER: testing_user
      POSTGRES_PASSWORD: testing_pass
    volumes:
      - test-db-data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always


networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  pgadmin-data:
  test-db-data: